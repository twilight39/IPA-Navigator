FROM --platform=amd64 rust:1

WORKDIR /app

RUN apt-get update && apt-get install -y \
    espeak-ng \
    espeak-ng-data \
    libespeak-ng-dev \
    build-essential \
    llvm \
    clang \
    libclang-dev \
    libclang1 \
    cmake \
    pkg-config \
    wget \
    bzip2 \
    ca-certificates \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create mfa user and directories
RUN useradd -ms /bin/bash mfauser
RUN mkdir -p /data /mfa

# Set ownership first
RUN chown -R mfauser:mfauser /home/mfauser /data /mfa

# Switch to mfa user for Miniconda installation
USER mfauser
WORKDIR /home/mfauser

# Install Miniconda for AMD64
RUN mkdir -p ~/miniconda3 && \
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh && \
    bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3 && \
    rm ~/miniconda3/miniconda.sh

# Initialize conda for bash shell
RUN echo '. ~/miniconda3/etc/profile.d/conda.sh' >> ~/.bashrc && \
    echo 'conda activate base' >> ~/.bashrc

# Add miniconda to PATH
ENV PATH="/home/mfauser/miniconda3/bin:${PATH}"

# Create and activate the aligner environment using a shell script with source
RUN /bin/bash -c "source ~/miniconda3/etc/profile.d/conda.sh && \
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main && \
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r && \
    conda init --all"

RUN /bin/bash -c "conda config --add channels conda-forge && conda create -n aligner montreal-forced-aligner"

# Pre-install dictionaries and models
RUN /bin/bash -c "source ~/miniconda3/etc/profile.d/conda.sh && \
    conda activate aligner && \
    mfa model download acoustic english_mfa && \
    mfa model download dictionary english_us_mfa && \
    mfa model download dictionary english_uk_mfa"

# Switch back to root for Rust dependencies
USER root
WORKDIR /usr/src/app

# Set LIBCLANG_PATH environment variable
ENV LIBCLANG_PATH=/usr/lib/llvm-19/lib

# Add rustfmt component
RUN rustup component add rustfmt

# Install cargo-watch for hot reloading
RUN cargo install cargo-watch
COPY . .

# Set environment variables
ENV HOST=0.0.0.0
ENV PORT=3002
ENV RUST_LOG=debug

# Expose the port
EXPOSE 3002

# Exclude target/ and other directories to prevent unnecessary rebuilds
CMD ["cargo", "watch", "--ignore", "target/", "--ignore", "*.wav", "-x", "run"]
